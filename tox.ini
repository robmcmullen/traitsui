[tox]
envlist = py{27,34}-backend{wx,qt4,undefined}

[testenv]
# To make sure we actually test the tarball and now the working directory
changedir = .tox

# We use symbolic links to provide PySide/PyQt4/Wx packages as they don't come
# with traitsui's requirements
whitelist_externals=/bin/ln

# Install development requirements (does not include wx or pyside or pyqt)
deps = -rtox-requirements.txt
basepython =
	   py27: python2.7
	   py34: python3.4
	   
# ETS_TOOLKIT for different test environments
setenv =
       backendqt4: ETS_TOOLKIT=qt4
       backendwx: ETS_TOOLKIT=wx
       backendundefined: ETS_TOOLKIT=

# Pass environment variables that point to the wx and pyside packages, e.g.:
# export WX_PY2_PATH=/usr/local/lib/python2.7/site-package/wx
# export PYSIDE_PY3_PATH=/usr/local/lib/python2.7/site-package/PySide
# Can point PYSIDE_*_PATH to a pyqt package if necessary
passenv=WX_PY27_PATH WXPY3_PATH PYSIDE_PY2_PATH PYSIDE_PY3_PATH

# Make sympolic links to the wx/qt4 packages
# and run tests
commands =
	 {py34-backendqt4,py34-backendundefined}: ln -sf {env:PYSIDE_PY3_PATH} {envsitepackagesdir}/
	 {py27-backendqt4,py27-backendundefined}: ln -sf {env:PYSIDE_PY2_PATH} {envsitepackagesdir}/
	 {py27-backendwx}: ln -sf {env:WX_PY2_PATH} {envsitepackagesdir}/
	 {py34-backendwx}: ln -sf {env:WX_PY3_PATH} {envsitepackagesdir}/	 
	 coverage run -m nose.core traitsui.tests
	 # default backend is qt4, so qt4 tests should run with undefined ETS_TOOLKIT just fine
	 {backendqt4,backendundefined}: coverage run -m nose.core traitsui.qt4.tests
